---
// src/components/MapSection.astro - Imagen más grande
import "../components/MapSection.css";

---

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css" />

<!-- Contenedor del mapa con altura adaptativa -->
<p class="flex text-gray-900 text-3xl font-semibold mb-4 justify-center items-center">Explora nuestro campus</p>
<div class="w-full flex flex-col lg:flex-row h-screen lg:min-h-0 lg:justify-center lg:items-start lg:max-w-[1440px] lg:mx-auto lg:px-4 lg:pl-28">
  <!-- Panel de filtros vertical -->
   
  <div id="filter-panel" class="w-full lg:w-60 xl:w-64 p-3 bg-gray-100 rounded-lg lg:rounded-r-none shadow-sm flex flex-col gap-2 overflow-y-auto max-h-[40vh] lg:max-h-[80vh] order-2 lg:order-1">
    <h3 class="font-semibold text-lg flex items-center justify-center lg:justify-start">
      Filtros 
    </h3>
    
    <div class="flex flex-col gap-2">
      <!-- Edificio -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="edificio" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Edificio</span>
      </label>

      <!-- Biblioteca -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="libreria" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Biblioteca</span>
      </label>

      <!-- Baños -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="baños" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Baños</span>
      </label>

      <!-- Tesorería -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="tesoreria" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Tesorería</span>
      </label>

      <!-- Calistenia -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="calistenia" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Calistenia</span>
      </label>

      <!-- Casino / Comedor -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="comer" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Casino/Cafeteria</span>
      </label>
      
      <!-- Gimnasio -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="gym" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Gimnasio</span>
      </label>

      <!-- Estacionamiento -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="estacionamiento" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Estacionamiento</span>
      </label>

      <!-- Estacionamiento bicicletas -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="bicicletas" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Estacionamiento bicicletas</span>
      </label>

      <!-- Servicio de impresiones -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="impresion" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">Servicio de impresiones</span>
      </label>

      <!-- DAAS -->
      <label class="ios-checkbox blue flex items-center gap-2">
        <input type="checkbox" class="marker-filter sr-only" data-type="daas" checked>
        <div class="checkbox-wrapper">
          <div class="checkbox-bg"></div>
          <svg fill="none" viewBox="0 0 24 24" class="checkbox-icon">
            <path stroke-linejoin="round" stroke-linecap="round" stroke-width="3"
                  stroke="currentColor" d="M4 12L10 18L20 6" class="check-path"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700 font-medium">DAAS</span>
      </label>

      <div class="flex gap-2 mt-2 items-center justify-center">
        <!-- Botón Todos -->
        <button id="select-all" class="magnetic-btn-small bg-gradient-to-r from-blue-600 to-blue-500 text-white px-6 py-3 rounded-xl font-semibold text-sm shadow-lg hover:shadow-xl hover:shadow-blue-500/40 transition-all duration-300 border-2 border-transparent hover:border-blue-300">
            Todos
        </button>
    
        <!-- Botón Ninguno -->
        <button id="deselect-all" class="magnetic-btn-small bg-gradient-to-r from-gray-500 to-gray-600 text-white px-6 py-3 rounded-xl font-semibold text-sm shadow-lg hover:shadow-xl hover:shadow-gray-500/40 transition-all duration-300 border-2 border-transparent hover:border-gray-400">
            Ninguno
        </button>
      </div>

      <!-- Botón Pantalla Completa -->
      <button id="fullscreen-btn" class="magnetic-btn-small bg-gradient-to-r from-blue-500 to-blue-600 text-white px-4 py-2.5 rounded-xl font-semibold text-sm shadow-lg hover:shadow-xl hover:shadow-blue-500/40 transition-all duration-300 flex items-center justify-center gap-2 border-2 border-transparent hover:border-blue-300">
          <span id="fullscreen-icon">
              <img src="fullscreen.svg" alt="" width="18" height="18" class="brightness-0 invert">
          </span>
          <span id="fullscreen-text">Pantalla Completa</span>
      </button>
    </div>
  </div>

  <!-- Contenedor del mapa -->
  <div class="flex-1 flex justify-center order-1 lg:order-2 lg:pl-4">
    <div id="map-wrapper" class="relative  lg:rounded-l-none overflow-hidden bg-gray-200 w-full h-[50vh] sm:h-[60vh] lg:h-[80vh] max-w-full">
      <div id="enhanced-map" class="w-full h-full lg:w-[112vh] transition-all duration-300"></div>
      
      <button id="exit-fullscreen" class="hidden flex absolute top-4 right-4 z-[1000] px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
        <img src="shrink.svg" alt="" width="18" height="18"> <p class="ml-2">Salir</p>
      </button>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>

<script>

document.addEventListener('DOMContentLoaded', function() {
  // Variables globales
  // @ts-ignore
  let map: L.Map;
  // @ts-ignore
  let bounds: L.LatLngBoundsExpression;
  let width: number = 0;
  let height: number = 0;

  // Configurar iconos por defecto
  // @ts-ignore
  delete L.Icon.Default.prototype._getIconUrl;
  // @ts-ignore
  L.Icon.Default.mergeOptions({
    iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
    iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png'
  });

    // Crear un icono personalizado con SVG
    // iconPath: ruta de tu SVG sin fondo
    // color: color de fondo del marcador
    // @ts-ignore
    const createMarkerWithSVG = (iconPath, color) => L.divIcon({
      html: `
        <svg width="35" height="45" viewBox="0 0 24 24">
          <!-- Fondo tipo Google Maps -->
          <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z" fill="${color}"/>
          <!-- Icono dentro -->
          <image href="${iconPath}" x="7" y="5" height="10" width="10"/>
        </svg>
      `,
      className: '',
      iconSize: [75, 90],      // tamaño total del marcador
      iconAnchor: [17, 45],    // punta de la gota coincide con coordenada
      popupAnchor: [0, -45]    // popup encima del marcador
    });

    // Iconos personalizados
    const customIcons = {
        edificio: createMarkerWithSVG('../markers/building.svg', '#3B82F6'),
        libreria: createMarkerWithSVG('/markers/library.svg', '#10B981'),
        laboratorio: createMarkerWithSVG('/markers/lab.svg', '#F59E0B'),
        comer: createMarkerWithSVG('/markers/utensils.svg', '#EF4444'),
        estacionamiento: createMarkerWithSVG('/markers/parking.svg', '#6366F1'),
        baños: createMarkerWithSVG('/markers/toilet.svg', '#6B7280'),
        bicicletas: createMarkerWithSVG('/markers/bike.svg', '#F97316'),
        gym: createMarkerWithSVG('/markers/dumbbell.svg', '#8B5CF6'),
        calistenia: createMarkerWithSVG('/markers/biceps-flexed.svg', '#EC4899'),
        impresion: createMarkerWithSVG('/markers/printer.svg', '#14B8A6'),
        daas: createMarkerWithSVG('/markers/notebook-pen.svg', '#F43F5E'),
        tesoreria: createMarkerWithSVG('/markers/wallet.svg', '#22C55E')
    };
  // Crear imagen para obtener dimensiones reales
  const img = new Image();
  
  img.onload = function() {
  // @ts-ignore
  width = this.naturalWidth;
  // @ts-ignore
  height = this.naturalHeight;
  // @ts-ignore
  map = L.map('enhanced-map', {
    // @ts-ignore
    crs: L.CRS.Simple,
    maxBounds: bounds,
    maxBoundsViscosity: 1.0,
    minZoom: -1,
    maxZoom: 0.5,
    zoomControl: true,
    tap: true,
    touchZoom: true,
    doubleClickZoom: true,
    scrollWheelZoom: true,
    boxZoom: true,
    keyboard: true,
    dragging: true,
    attributionControl: false
  });
    // Bounds exactos según la imagen
    bounds = [[0, 0], [height, width]];
    
    // Agregar imagen
    // @ts-ignore
    L.imageOverlay('/Map.png', bounds).addTo(map);

    // Ajustar la vista exactamente a la imagen
    map.fitBounds(bounds);

    // Limitar el área de paneo a la imagen
    map.setMaxBounds(bounds);
    
    // Centrar vista inicial
    map.setView([height / 2, width / 2], -1); // 👈 centrado y con zoom inicial = 1

    // Marcadores con iconos personalizados
    const predefinedMarkers = [
        { pos: [height * 0.277, width * 0.323], name: "Edificio 1", type: "edificio", description: "Edificio de informaciones y asistentes sociales" },
        { pos: [height * 0.394, width * 0.407], name: "Edificio 2", type: "edificio", description: "Edificio con salas de clase, baños y sala de estar" },
        { pos: [height * 0.443, width * 0.549], name: "Edificio 3", type: "edificio", description: "Edificio con salas de clase, baños y sala de estar" },
        { pos: [height * 0.504, width * 0.487], name: "Biblioteca", type: "libreria", description: "Venta de libros y sala de estudio" },
        { pos: [height * 0.533, width * 0.667], name: "Servicio de impresiones", type: "impresion", description: "Libreria con servicio de impresiones" },
        { pos: [height * 0.59, width * 0.705], name: "DAAS", type: "daas", description: "Dirección de Acompañamiento Académico y Socioemocional" },
        { pos: [height * 0.77, width * 0.88], name: "Tesoreria", type: "tesoreria", description: "Gestión de todos los pagos y trámites financieros de la universidad, incluyendo aranceles, matrículas y deudas. También cuenta con cajas para atención directa a estudiantes y personas." },
        { pos: [height * 0.92, width * 0.575], name: "Edificio 12", type: "edificio", description: "Edificio con salas de clase, baños y sala de estar" },
        { pos: [height * 0.842, width * 0.515], name: "Edificio 13", type: "edificio", description: "Edificio con salas de clase, baños y sala de estar" },
        { pos: [height * 0.767, width * 0.45], name: "Edificio 14", type: "edificio", description: "Edificio con salas de clase, baños y sala de estar" },
        { pos: [height * 0.654, width * 0.376], name: "Edificio 15", type: "edificio", description: "Edificio con salas de clase, baños y sala de estar" },
        { pos: [height * 0.497, width * 0.255], name: "Edificio 16", type: "edificio", description: "Edificio de carrerras tecnicas" },
        { pos: [height * 0.418, width * 0.233], name: "Edificio 17", type: "edificio", description: "Edificio con apartado de informatica y enfermeria" },
        { pos: [height * 0.36, width * 0.597], name: "Edificio 21", type: "edificio", description: "Edificio con salas de clase, baños y sala de estar" },
        { pos: [height * 0.35, width * 0.47], name: "Biblioteca Central", type: "libreria", description: "Recursos académicos y salas de estudio" },
        { pos: [height * 0.49, width * 0.64], name: "Cafetería", type: "comer", description: "Cafeteria para todo publico" },
        { pos: [height * 0.79, width * 0.67], name: "Comedor", type: "comer", description: "Comedor piso 1, edificio" },
        { pos: [height * 0.757, width * 0.81], name: "Estacionamiento", type: "estacionamiento", description: "Zona de estacionamiento para todo publico" },
        { pos: [height * 0.8, width * 0.77], name: "Baños Públicos", type: "baños", description: "Baños para todo publico, saliendo del comedor" },
        { pos: [height * 0.42, width * 0.181], name: "Estacionamiento de Bicicletas", type: "bicicletas", description: "Zona segura para estacionar bicicletas" },
        { pos: [height * 0.63, width * 0.395], name: "Gimnasio", type: "gym", description: "Gimnasio en edificio 15, cuenta con dos pisos, piso 3 maquinas de ejercicio, piso 4 multifuncional" },
        { pos: [height * 0.56, width * 0.64], name: "Zona de Calistenia", type: "calistenia", description: "Área al aire libre para ejercicios de calistenia o de fuerza" }
    ];

    // Guardamos referencias a los marcadores por tipo
    // @ts-ignore
    const markersByType: Record<string, L.Marker[]> = {};

// Crear marcadores y agregarlos al mapa
predefinedMarkers.forEach(marker => {
  // @ts-ignore
  const icon = customIcons[marker.type];
  if (!icon) return;
  // @ts-ignore
  const leafletMarker = L.marker(marker.pos, { icon })
    .addTo(map)
    .bindPopup(
      `
      <div class="p-2">
        <h3 class="font-bold text-lg mb-2">${marker.name}</h3>
        <p class="text-sm text-gray-600 mb-2">${marker.description}</p>
        <div class="text-xs text-gray-500">
          <button class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
            Ir a vista 360
          </button>
        </div>
      </div>
      `,
      {
        autoPan: true, // Ajusta la vista para mostrar el popup completo
        autoPanPadding: [10, 10], // Padding alrededor del popup
        keepInView: true, // Mantiene el popup visible en el mapa
      }
    );

  // Guardar referencia por tipo
  if (!markersByType[marker.type]) {
    markersByType[marker.type] = [];
  }
  markersByType[marker.type].push(leafletMarker);
});

// Función para actualizar visibilidad según checkbox
function updateMarkers() {
  document.querySelectorAll<HTMLInputElement>('.marker-filter').forEach(cb => {
    const type = cb.dataset.type!;
    const show = cb.checked;

    markersByType[type]?.forEach(marker => {
      if (show) {
        marker.addTo(map);
      } else {
        map.removeLayer(marker);
      }
    });
  });
}


    // Event listeners para checkboxes
    document.querySelectorAll('.marker-filter').forEach(cb => {
      cb.addEventListener('change', updateMarkers);
    });

    // Botones Todos/Ninguno
    document.getElementById('select-all')!.addEventListener('click', () => {
      document.querySelectorAll<HTMLInputElement>('.marker-filter').forEach(cb => cb.checked = true);
      updateMarkers();
    });
    
    document.getElementById('deselect-all')!.addEventListener('click', () => {
      document.querySelectorAll<HTMLInputElement>('.marker-filter').forEach(cb => cb.checked = false);
      updateMarkers();
    });


    // Eventos para mejorar la experiencia
    map.on('zoom', function() {
      const zoomLevel = map.getZoom();
      console.log('Zoom level:', zoomLevel);
    });

    map.on('moveend', function() {
      const center = map.getCenter();
    });
  };

  img.src = '/Map.png';

  // CONTROLES DE INTERFAZ

  // Pantalla completa
  document.getElementById('fullscreen-btn')!.addEventListener('click', function() {
  const mapWrapper = document.getElementById('map-wrapper')!;
  const exitBtn = document.getElementById('exit-fullscreen')!;
  const mapDiv = document.getElementById('enhanced-map')!;
  
  if (!document.fullscreenElement) {
    mapWrapper.requestFullscreen().then(() => {
      mapDiv.style.width = '100vw';
      mapDiv.style.height = '100vh';
      setTimeout(() => {
        map.invalidateSize();
        map.fitBounds(bounds);
      }, 300);
      exitBtn.classList.remove('hidden');
    });
  }
});

  // Salir de pantalla completa
  document.addEventListener('fullscreenchange', function() {
  const mapDiv = document.getElementById('enhanced-map')!;
  const exitBtn = document.getElementById('exit-fullscreen')!;
  
  if (!document.fullscreenElement) {
    mapDiv.style.width = '100vh'; // vuelve al tamaño anterior
    mapDiv.style.height = window.innerWidth < 640 ? '70vh' : '80vh';
    exitBtn.classList.add('hidden');
    document.exitFullscreen();
    setTimeout(() => {
      map.invalidateSize();
      map.fitBounds(bounds);
    }, 300);
  }

    exitBtn.addEventListener('click', function() {
        document.exitFullscreen();
    });
});

  // Event listener para cambios de pantalla completa
  document.addEventListener('fullscreenchange', function() {
    const mapDiv = document.getElementById('enhanced-map')!;
    const exitBtn = document.getElementById('exit-fullscreen')!;
    
    if (!document.fullscreenElement) {
      mapDiv.style.height = window.innerWidth < 640 ? '70vh' : '80vh';
      exitBtn.classList.add('hidden');
      document.getElementById('fullscreen-text')!.textContent = 'Pantalla Completa';
      setTimeout(() => map && map.invalidateSize(), 100);
    }
  });

  // Redimensionar mapa cuando cambia el tamaño de ventana
  window.addEventListener('resize', function() {
    if (map) {
      setTimeout(() => map.invalidateSize(), 100);
    }
  });
});

</script>